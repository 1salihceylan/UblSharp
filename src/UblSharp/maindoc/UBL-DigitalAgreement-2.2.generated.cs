// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Manual changes to this file will be overwritten if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------
namespace UblSharp
{
    using UblSharp.CommonAggregateComponents;
    using UblSharp.UnqualifiedDataTypes;
    using UblSharp.CommonExtensionComponents;
    
    
    /// <summary>
    /// A document used to support business parties agreeing on a set of digital processes, terms and conditions to ensure interoperability.
    /// <para />ComponentType: ABIE
    /// <para />DictionaryEntryName: Digital Agreement. Details
    /// <para />ObjectClass: Digital Agreement
    /// <para />AlternativeBusinessTerms: Trading Partner Agreement, TPA
    /// </summary>
#if FEATURE_SERIALIZATION
    [System.SerializableAttribute()]
#endif
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DigitalAgreement", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:DigitalAgreement-2")]
    [System.Xml.Serialization.XmlRootAttribute("DigitalAgreement", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:DigitalAgreement-2", IsNullable=false)]
    public partial class DigitalAgreementType : BaseDocument, IBaseDocument
    {
        
        private System.Collections.Generic.List<UBLExtensionType> _uBLExtensions;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlArrayAttribute("UBLExtensions", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("UBLExtension", IsNullable=false)]
        public UBLExtensionType[] @__UBLExtensions
        {
            get
            {
                return _uBLExtensions?.ToArray();
            }
            set
            {
                _uBLExtensions = value == null ? null : new System.Collections.Generic.List<UBLExtensionType>(value);
            }
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("UBLVersionID", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2", Order=1)]
        public IdentifierType @__UBLVersionID;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("CustomizationID", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2", Order=2)]
        public IdentifierType @__CustomizationID;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ProfileID", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2", Order=3)]
        public IdentifierType @__ProfileID;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ProfileExecutionID", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2", Order=4)]
        public IdentifierType @__ProfileExecutionID;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ID", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2", Order=5)]
        public IdentifierType @__ID;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("UUID", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2", Order=6)]
        public IdentifierType @__UUID;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("IssueDate", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2", Order=7)]
        public DateType @__IssueDate;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("IssueTime", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2", Order=8)]
        public TimeType @__IssueTime;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("AgreementTypeCode", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2", Order=9)]
        public CodeType @__AgreementTypeCode;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("VersionID", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2", Order=10)]
        public IdentifierType @__VersionID;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("PreviousVersionID", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2", Order=11)]
        public IdentifierType @__PreviousVersionID;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("RequiredResponseMessageLevelCode", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2", Order=12)]
        public CodeType @__RequiredResponseMessageLevelCode;
        
        private System.Collections.Generic.List<SignatureType> _signature;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("Signature", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2", Order=13)]
        public SignatureType[] @__Signature
        {
            get
            {
                return _signature?.ToArray();
            }
            set
            {
                _signature = value == null ? null : new System.Collections.Generic.List<SignatureType>(value);
            }
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("GovernorParty", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2", Order=14)]
        public PartyType @__GovernorParty;
        
        private System.Collections.Generic.List<ParticipantPartyType> _participantParty;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ParticipantParty", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2", Order=15)]
        public ParticipantPartyType[] @__ParticipantParty
        {
            get
            {
                return _participantParty?.ToArray();
            }
            set
            {
                _participantParty = value == null ? null : new System.Collections.Generic.List<ParticipantPartyType>(value);
            }
        }
        
        private System.Collections.Generic.List<CountryType> _agreementCountry;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("AgreementCountry", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2", Order=16)]
        public CountryType[] @__AgreementCountry
        {
            get
            {
                return _agreementCountry?.ToArray();
            }
            set
            {
                _agreementCountry = value == null ? null : new System.Collections.Generic.List<CountryType>(value);
            }
        }
        
        private System.Collections.Generic.List<DocumentReferenceType> _requiredCertificationDocumentReference;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("RequiredCertificationDocumentReference", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2", Order=17)]
        public DocumentReferenceType[] @__RequiredCertificationDocumentReference
        {
            get
            {
                return _requiredCertificationDocumentReference?.ToArray();
            }
            set
            {
                _requiredCertificationDocumentReference = value == null ? null : new System.Collections.Generic.List<DocumentReferenceType>(value);
            }
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("DigitalAgreementTerms", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2", Order=18)]
        public DigitalAgreementTermsType @__DigitalAgreementTerms;
        
        private System.Collections.Generic.List<DigitalProcessType> _digitalProcess;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("DigitalProcess", Namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2", Order=19)]
        public DigitalProcessType[] @__DigitalProcess
        {
            get
            {
                return _digitalProcess?.ToArray();
            }
            set
            {
                _digitalProcess = value == null ? null : new System.Collections.Generic.List<DigitalProcessType>(value);
            }
        }
        
        /// <summary>
        /// A container for all extensions present in the document.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        System.Collections.Generic.List<UBLExtensionType> IBaseDocument.UBLExtensions
        {
            get { return _uBLExtensions ?? (_uBLExtensions = new System.Collections.Generic.List<UBLExtensionType>()); }
            set { _uBLExtensions = value; }
        }

        
        /// <summary>
        /// A signature applied to this document.
        /// <para />ComponentType: ASBIE
        /// <para />DictionaryEntryName: Digital Agreement. Signature
        /// <para />Cardinality: 0..n
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTerm: Signature
        /// <para />AssociatedObjectClass: Signature
        /// <para />RepresentationTerm: Signature
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        System.Collections.Generic.List<SignatureType> IBaseDocument.Signature
        {
            get { return _signature ?? (_signature = new System.Collections.Generic.List<SignatureType>()); }
            set { _signature = value; }
        }

        
        /// <summary>
        /// The business parties agreeing on a set of digital processes, terms and conditions to ensure interoperability.
        /// <para />ComponentType: ASBIE
        /// <para />DictionaryEntryName: Digital Agreement. Participant Party
        /// <para />Cardinality: 1..n
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTerm: Participant Party
        /// <para />AssociatedObjectClass: Participant Party
        /// <para />RepresentationTerm: Participant Party
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        public System.Collections.Generic.List<ParticipantPartyType> ParticipantParty
        {
            get { return _participantParty ?? (_participantParty = new System.Collections.Generic.List<ParticipantPartyType>()); }
            set { _participantParty = value; }
        }

        
        /// <summary>
        /// The country to which this digital agreement applies.
        /// <para />ComponentType: ASBIE
        /// <para />DictionaryEntryName: Digital Agreement. Agreement_ Country. Country
        /// <para />Cardinality: 0..n
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTermQualifier: Agreement
        /// <para />PropertyTerm: Country
        /// <para />AssociatedObjectClass: Country
        /// <para />RepresentationTerm: Country
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        public System.Collections.Generic.List<CountryType> AgreementCountry
        {
            get { return _agreementCountry ?? (_agreementCountry = new System.Collections.Generic.List<CountryType>()); }
            set { _agreementCountry = value; }
        }

        
        /// <summary>
        /// A reference to a certification document required by this digital agreement.
        /// <para />ComponentType: ASBIE
        /// <para />DictionaryEntryName: Digital Agreement. Required Certification_ Document Reference. Document Reference
        /// <para />Cardinality: 0..n
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTermQualifier: Required Certification
        /// <para />PropertyTerm: Document Reference
        /// <para />AssociatedObjectClass: Document Reference
        /// <para />RepresentationTerm: Document Reference
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        public System.Collections.Generic.List<DocumentReferenceType> RequiredCertificationDocumentReference
        {
            get { return _requiredCertificationDocumentReference ?? (_requiredCertificationDocumentReference = new System.Collections.Generic.List<DocumentReferenceType>()); }
            set { _requiredCertificationDocumentReference = value; }
        }

        
        /// <summary>
        /// The digital processes in scope of this digital agreement.
        /// <para />ComponentType: ASBIE
        /// <para />DictionaryEntryName: Digital Agreement. Digital Process
        /// <para />Cardinality: 1..n
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTerm: Digital Process
        /// <para />AssociatedObjectClass: Digital Process
        /// <para />RepresentationTerm: Digital Process
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        public System.Collections.Generic.List<DigitalProcessType> DigitalProcess
        {
            get { return _digitalProcess ?? (_digitalProcess = new System.Collections.Generic.List<DigitalProcessType>()); }
            set { _digitalProcess = value; }
        }

        
        /// <summary>
        /// Identifies the earliest version of the UBL 2 schema for this document type that defines all of the elements that might be encountered in the current instance.
        /// <para />ComponentType: BBIE
        /// <para />DictionaryEntryName: Digital Agreement. UBL Version Identifier. Identifier
        /// <para />Cardinality: 0..1
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTerm: UBL Version Identifier
        /// <para />RepresentationTerm: Identifier
        /// <para />DataType: Identifier. Type
        /// </summary>
        /// <example>2.2</example>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        IdentifierType IBaseDocument.UBLVersionID
        {
            get
            {
                if (__UBLVersionID == null) { __UBLVersionID = new IdentifierType(); }
                return __UBLVersionID;
            }
            set
            {
                __UBLVersionID = value;
            }
        }

        
        /// <summary>
        /// Identifies a user-defined customization of UBL for a specific use.
        /// <para />ComponentType: BBIE
        /// <para />DictionaryEntryName: Digital Agreement. Customization Identifier. Identifier
        /// <para />Cardinality: 0..1
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTerm: Customization Identifier
        /// <para />RepresentationTerm: Identifier
        /// <para />DataType: Identifier. Type
        /// </summary>
        /// <example>EESPA</example>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        IdentifierType IBaseDocument.CustomizationID
        {
            get
            {
                if (__CustomizationID == null) { __CustomizationID = new IdentifierType(); }
                return __CustomizationID;
            }
            set
            {
                __CustomizationID = value;
            }
        }

        
        /// <summary>
        /// Identifies a user-defined profile of the customization of UBL being used.
        /// <para />ComponentType: BBIE
        /// <para />DictionaryEntryName: Digital Agreement. Profile Identifier. Identifier
        /// <para />Cardinality: 0..1
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTerm: Profile Identifier
        /// <para />RepresentationTerm: Identifier
        /// <para />DataType: Identifier. Type
        /// </summary>
        /// <example>BasicProcurementProcess</example>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        IdentifierType IBaseDocument.ProfileID
        {
            get
            {
                if (__ProfileID == null) { __ProfileID = new IdentifierType(); }
                return __ProfileID;
            }
            set
            {
                __ProfileID = value;
            }
        }

        
        /// <summary>
        /// Identifies an instance of executing a profile, to associate all transactions in a collaboration.
        /// <para />ComponentType: BBIE
        /// <para />DictionaryEntryName: Digital Agreement. Profile Execution Identifier. Identifier
        /// <para />Cardinality: 0..1
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTerm: Profile Execution Identifier
        /// <para />RepresentationTerm: Identifier
        /// <para />DataType: Identifier. Type
        /// </summary>
        /// <example>BPP-1001</example>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        IdentifierType IBaseDocument.ProfileExecutionID
        {
            get
            {
                if (__ProfileExecutionID == null) { __ProfileExecutionID = new IdentifierType(); }
                return __ProfileExecutionID;
            }
            set
            {
                __ProfileExecutionID = value;
            }
        }

        
        /// <summary>
        /// An identifier for this document, assigned by the sender.
        /// <para />ComponentType: BBIE
        /// <para />DictionaryEntryName: Digital Agreement. Identifier
        /// <para />Cardinality: 1
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTerm: Identifier
        /// <para />RepresentationTerm: Identifier
        /// <para />DataType: Identifier. Type
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        IdentifierType IBaseDocument.ID
        {
            get
            {
                if (__ID == null) { __ID = new IdentifierType(); }
                return __ID;
            }
            set
            {
                __ID = value;
            }
        }

        
        /// <summary>
        /// A universally unique identifier for an instance of this document.
        /// <para />ComponentType: BBIE
        /// <para />DictionaryEntryName: Digital Agreement. UUID. Identifier
        /// <para />Cardinality: 0..1
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTerm: UUID
        /// <para />RepresentationTerm: Identifier
        /// <para />DataType: Identifier. Type
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        IdentifierType IBaseDocument.UUID
        {
            get
            {
                if (__UUID == null) { __UUID = new IdentifierType(); }
                return __UUID;
            }
            set
            {
                __UUID = value;
            }
        }

        
        /// <summary>
        /// The date, assigned by the sender, on which this document was issued.
        /// <para />ComponentType: BBIE
        /// <para />DictionaryEntryName: Digital Agreement. Issue Date. Date
        /// <para />Cardinality: 1
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTerm: Issue Date
        /// <para />RepresentationTerm: Date
        /// <para />DataType: Date. Type
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        public DateType IssueDate
        {
            get
            {
                if (__IssueDate == null) { __IssueDate = new DateType(); }
                return __IssueDate;
            }
            set
            {
                __IssueDate = value;
            }
        }

        
        /// <summary>
        /// The time, assigned by the sender, at which this document was issued.
        /// <para />ComponentType: BBIE
        /// <para />DictionaryEntryName: Digital Agreement. Issue Time. Time
        /// <para />Cardinality: 0..1
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTerm: Issue Time
        /// <para />RepresentationTerm: Time
        /// <para />DataType: Time. Type
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        public TimeType IssueTime
        {
            get
            {
                if (__IssueTime == null) { __IssueTime = new TimeType(); }
                return __IssueTime;
            }
            set
            {
                __IssueTime = value;
            }
        }

        
        /// <summary>
        /// A code signifying the type of digital agreement (e.g. bi-lateral, multi-lateral).
        /// <para />ComponentType: BBIE
        /// <para />DictionaryEntryName: Digital Agreement. Agreement Type Code. Code
        /// <para />Cardinality: 0..1
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTerm: Agreement Type Code
        /// <para />RepresentationTerm: Code
        /// <para />DataType: Code. Type
        /// </summary>
        /// <example>multi-lateral</example>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        public CodeType AgreementTypeCode
        {
            get
            {
                if (__AgreementTypeCode == null) { __AgreementTypeCode = new CodeType(); }
                return __AgreementTypeCode;
            }
            set
            {
                __AgreementTypeCode = value;
            }
        }

        
        /// <summary>
        /// Identifies the current version of this digital agreement.
        /// <para />ComponentType: BBIE
        /// <para />DictionaryEntryName: Digital Agreement. Version Identifier. Identifier
        /// <para />Cardinality: 1
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTerm: Version Identifier
        /// <para />RepresentationTerm: Identifier
        /// <para />DataType: Identifier. Type
        /// </summary>
        /// <example>1.1</example>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        public IdentifierType VersionID
        {
            get
            {
                if (__VersionID == null) { __VersionID = new IdentifierType(); }
                return __VersionID;
            }
            set
            {
                __VersionID = value;
            }
        }

        
        /// <summary>
        /// Identifies the previous version of this digital agreement.
        /// <para />ComponentType: BBIE
        /// <para />DictionaryEntryName: Digital Agreement. Previous Version Identifier. Identifier
        /// <para />Cardinality: 0..1
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTerm: Previous Version Identifier
        /// <para />RepresentationTerm: Identifier
        /// <para />DataType: Identifier. Type
        /// </summary>
        /// <example>1</example>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        public IdentifierType PreviousVersionID
        {
            get
            {
                if (__PreviousVersionID == null) { __PreviousVersionID = new IdentifierType(); }
                return __PreviousVersionID;
            }
            set
            {
                __PreviousVersionID = value;
            }
        }

        
        /// <summary>
        /// A code signifying the minimum response message level the parties are required to provide (e.g. EESPA response message level).
        /// <para />ComponentType: BBIE
        /// <para />DictionaryEntryName: Digital Agreement. Required_ Response Message Level Code. Code
        /// <para />Cardinality: 0..1
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTermQualifier: Required
        /// <para />PropertyTerm: Response Message Level Code
        /// <para />RepresentationTerm: Code
        /// <para />DataType: Code. Type
        /// </summary>
        /// <example>RM2</example>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        public CodeType RequiredResponseMessageLevelCode
        {
            get
            {
                if (__RequiredResponseMessageLevelCode == null) { __RequiredResponseMessageLevelCode = new CodeType(); }
                return __RequiredResponseMessageLevelCode;
            }
            set
            {
                __RequiredResponseMessageLevelCode = value;
            }
        }

        
        /// <summary>
        /// The party governing the agreement (e.g. a multi-lateral digital agreement).
        /// <para />ComponentType: ASBIE
        /// <para />DictionaryEntryName: Digital Agreement. Governor_ Party. Party
        /// <para />Cardinality: 0..1
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTermQualifier: Governor
        /// <para />PropertyTerm: Party
        /// <para />AssociatedObjectClass: Party
        /// <para />RepresentationTerm: Party
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        public PartyType GovernorParty
        {
            get
            {
                if (__GovernorParty == null) { __GovernorParty = new PartyType(); }
                return __GovernorParty;
            }
            set
            {
                __GovernorParty = value;
            }
        }

        
        /// <summary>
        /// A reference to digital agreement terms and conditions.
        /// <para />ComponentType: ASBIE
        /// <para />DictionaryEntryName: Digital Agreement. Digital Agreement Terms
        /// <para />Cardinality: 0..1
        /// <para />ObjectClass: Digital Agreement
        /// <para />PropertyTerm: Digital Agreement Terms
        /// <para />AssociatedObjectClass: Digital Agreement Terms
        /// <para />RepresentationTerm: Digital Agreement Terms
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        public DigitalAgreementTermsType DigitalAgreementTerms
        {
            get
            {
                if (__DigitalAgreementTerms == null) { __DigitalAgreementTerms = new DigitalAgreementTermsType(); }
                return __DigitalAgreementTerms;
            }
            set
            {
                __DigitalAgreementTerms = value;
            }
        }

    }
}
